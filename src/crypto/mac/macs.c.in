/*
  Copyright (c) 2012-2013, Matthias Schiffer <mschiffer@universe-factory.net>
  All rights reserved.

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

    1. Redistributions of source code must retain the above copyright notice,
       this list of conditions and the following disclaimer.
    2. Redistributions in binary form must reproduce the above copyright notice,
       this list of conditions and the following disclaimer in the documentation
       and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/


#include <src/config.h>
#include <src/crypto.h>


@MAC_DEFINITIONS@

typedef struct mac_impl_list {
	const char *name;
	const fastd_mac_t *const *impls;
} mac_impl_list_t;

@MAC_IMPLS@

static const mac_impl_list_t macs[] = { @MAC_LIST@
};


const fastd_mac_t** fastd_mac_config_alloc(void) {
	const fastd_mac_t **mac_conf = calloc(array_size(macs), sizeof(const fastd_mac_t*));

	size_t i;
	for (i = 0; i < array_size(macs); i++)
		mac_conf[i] = macs[i].impls[0];

	return mac_conf;
}

void fastd_mac_config_free(const fastd_mac_t **mac_conf) {
	free(mac_conf);
}

bool fastd_mac_config(const fastd_mac_t **mac_conf, const char *name, const char *impl) {
	size_t i;
	for (i = 0; i < array_size(macs); i++) {
		if (!strcmp(macs[i].name, name)) {
			size_t j;
			for (j = 0; macs[i].impls[j]; j++) {
				if (!strcmp(macs[i].impls[j]->name, impl)) {
					mac_conf[i] = macs[i].impls[j];
					return true;
				}
			}

			return false;
		}
	}

	return false;
}

void fastd_mac_init(fastd_context_t *ctx) {
	ctx->mac_contexts = calloc(array_size(macs), sizeof(fastd_mac_context_t*));

	size_t i;
	for (i = 0; i < array_size(macs); i++) {
		if (ctx->conf->macs[i])
			ctx->mac_contexts[i] = ctx->conf->macs[i]->initialize(ctx);
	}
}

void fastd_mac_free(fastd_context_t *ctx) {
	size_t i;
	for (i = 0; i < array_size(macs); i++)
		ctx->conf->macs[i]->free(ctx, ctx->mac_contexts[i]);

	free(ctx->mac_contexts);
}

bool fastd_mac_available(const char *name) {
	size_t i;
	for (i = 0; i < array_size(macs); i++) {
		if (!strcmp(macs[i].name, name))
			return macs[i].impls[0];
	}

	return false;
}

const fastd_mac_t* fastd_mac_get_by_name(fastd_context_t *ctx, const char *name, const fastd_mac_context_t **cctx) {
	size_t i;
	for (i = 0; i < array_size(macs); i++) {
		if (!strcmp(macs[i].name, name)) {
			if (cctx)
				*cctx = ctx->mac_contexts[i];

			return ctx->conf->macs[i];
		}
	}

	return NULL;
}
